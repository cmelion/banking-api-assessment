// This is your Prisma schema file for SQLite,
// Used for local development and testing when PostgreSQL is not available

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id           String     @id @default(uuid())
  username     String     @unique
  email        String     @unique
  passwordHash String     @map("password_hash")
  firstName    String?    @map("first_name")
  lastName     String?    @map("last_name")
  phoneNumber  String?    @map("phone_number")
  isActive     Boolean    @default(true) @map("is_active")
  role         String     @default("USER")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  refreshTokens RefreshToken[]

  @@map("users")
}

// Account model for bank accounts
model Account {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  accountNumber String      @unique @map("account_number")
  accountType   String      @default("CHECKING") @map("account_type")
  balance       Decimal     @default(0.00)
  currency      String      @default("USD")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user               User          @relation(fields: [userId], references: [id])
  transactions       Transaction[]
  transfersFrom      Transfer[]    @relation("FromAccount")
  transfersTo        Transfer[]    @relation("ToAccount")
  cards              Card[]
  statements         Statement[]

  @@index([userId])
  @@map("accounts")
}

// Transaction model for all monetary movements
model Transaction {
  id              String    @id @default(uuid())
  accountId       String    @map("account_id")
  transferId      String?   @map("transfer_id")
  type            String    // DEBIT, CREDIT, TRANSFER_IN, TRANSFER_OUT
  amount          Decimal
  balanceAfter    Decimal   @map("balance_after")
  description     String?
  reference       String?
  metadata        String?   // JSON string for additional data
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  account  Account   @relation(fields: [accountId], references: [id])
  transfer Transfer? @relation(fields: [transferId], references: [id])

  @@index([accountId])
  @@index([transferId])
  @@map("transactions")
}

// Transfer model for money transfers between accounts
model Transfer {
  id               String       @id @default(uuid())
  fromAccountId    String       @map("from_account_id")
  toAccountId      String       @map("to_account_id")
  amount           Decimal
  currency         String       @default("USD")
  status           String       @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  description      String?
  reference        String?
  idempotencyKey   String?      @unique @map("idempotency_key")
  metadata         String?      // JSON string for additional data
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  completedAt      DateTime?    @map("completed_at")

  // Relations
  fromAccount  Account       @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount    Account       @relation("ToAccount", fields: [toAccountId], references: [id])
  transactions Transaction[]

  @@index([fromAccountId])
  @@index([toAccountId])
  @@index([idempotencyKey])
  @@map("transfers")
}

// Card model for debit/credit cards
model Card {
  id            String    @id @default(uuid())
  accountId     String    @map("account_id")
  cardType      String    @default("DEBIT") @map("card_type") // DEBIT, CREDIT
  maskedPan     String    @map("masked_pan") // e.g., "**** **** **** 1234"
  cardholderName String   @map("cardholder_name")
  expiryMonth   Int       @map("expiry_month")
  expiryYear    Int       @map("expiry_year")
  status        String    @default("ACTIVE") // ACTIVE, BLOCKED, EXPIRED
  issuedAt      DateTime  @default(now()) @map("issued_at")
  lastUsedAt    DateTime? @map("last_used_at")

  // Relations
  account Account @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@map("cards")
}

// Statement model for account statements
model Statement {
  id          String    @id @default(uuid())
  accountId   String    @map("account_id")
  periodStart DateTime  @map("period_start")
  periodEnd   DateTime  @map("period_end")
  openingBalance Decimal @map("opening_balance")
  closingBalance Decimal @map("closing_balance")
  totalDebits    Decimal @map("total_debits")
  totalCredits   Decimal @map("total_credits")
  transactionCount Int   @map("transaction_count")
  generatedAt  DateTime @default(now()) @map("generated_at")
  fileUrl      String?  @map("file_url")

  // Relations
  account Account @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@map("statements")
}

// Refresh token model for JWT refresh tokens
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("refresh_tokens")
}

// Idempotency key model for ensuring unique transfers
model IdempotencyKey {
  id        String   @id @default(uuid())
  key       String   @unique
  response  String   // JSON string of the response
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@index([key])
  @@map("idempotency_keys")
}